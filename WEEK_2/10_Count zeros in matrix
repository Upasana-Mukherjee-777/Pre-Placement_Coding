QUESTION:
Given a N X N binary Square Matrix where each row and column of the matrix is sorted in ascending order. Find the total number of zeros present in the matrix.

Example 1:

Input:
N = 3
A = {{0, 0, 0},
     {0, 0, 1},
     {0, 1, 1}}
Output: 6
Explanation: 
The first, second and third row contains 3, 2 and 1
zeroes respectively.
Example 2:

Input:
N = 2
A = {{1, 1},
     {1, 1}}
Output: 0
Explanation:
There are no zeroes in any of the rows.
Your Task:
You don't need to read input or print anything. Your task is to complete the function countZeros() which takes a 2D matrix as input and returns the number occurring only once.

Expected Time Complexity: O(N ).
Expected Auxiliary Space: O(1).

Constraints
0 <   N  <= 103
0 <= A[i] <= 1

GFG Python3:
row = 0
        col = N - 1
        count = 0

        while row < N and col >= 0:
            if A[row][col] == 0:
                count += (col + 1)
                row += 1
            else:
                col -= 1

        return count


C:
#include <stdio.h>
int countZeroes(int A[][1000], int N) {
    int row = 0, col = N - 1, count = 0;

    while (row < N && col >= 0) {
        if (A[row][col] == 0) {
            count += col + 1;
            row++;
        } else {
            col--;
        }
    }
    return count;
}

int main() {
    int A[3][1000] = {
        {0, 0, 0},
        {0, 0, 1},
        {0, 1, 1}
    };
    int N = 3;
    printf("Total zeroes: %d\n", countZeroes(A, N));
    return 0;
}
