QUESTION: 

Given a square of matrix M of size N*N. You task is to compute and return sum of principal diagonal elements of matrix. Your have to complete the function diagonalSum() which accepts N (size of matrix, N*N) and matrix M[ ][ ] as arguments.

Input:
The first input line contains T, denoting the number of testcases. Each testcase contains two lines. The first line contains N (size of matrix). The second line contains N*N elements of matrix separated by space.

Output:
For each testcase in new line, print the sum of diagonal elements.

User Task:
Since this is a functional problem you don't have to worry about input, you just have to complete the function sumDiagonal().

Constraints:
1 <= T <= 100
1 <= N <= 50
1 <= M[i][j] <= 100

Example:
Input:
1
3
1 2 3 4 5 6 7 8 9

Output:
15

Explanation:
Testcase 1: Sum of diagonal elements are: 1+5+9 = 15.


Python:
class Solution:
    def DiagonalSum(self, matrix):
        n = len(matrix)
        total = 0
        
        for i in range(n):
            total += matrix[i][i]               # primary diagonal
            total += matrix[i][n - 1 - i]       # secondary diagonal
        
        return total

C:

#include <stdio.h>

#define N 100  // Maximum size of the matrix

int DiagonalSum(int matrix[][N], int n) {
    int total = 0;

    for (int i = 0; i < n; i++) {
        total += matrix[i][i];
        total += matrix[i][n - 1 - i];
    }

    if (n % 2 == 1) {
        total -= matrix[n / 2][n / 2];
    }

    return total;
}

int main() {
    int matrix[N][N];
    int n;

    printf("Enter the size of the square matrix (n): ");
    scanf("%d", &n);

    printf("Enter the elements of the %d x %d matrix:\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    int sum = DiagonalSum(matrix, n);
    printf("Sum of diagonals: %d\n", sum);

    return 0;
}
