QUESTION: 

You are given an array arr[] containing positive integers. The elements in the array arr[] range from  1 to n (where n is the size of the array), and some numbers may be repeated or absent. Your have to count the frequency of all numbers in the range 1 to n and return an array of size n such that result[i] represents the frequency of the number i (1-based indexing).

Examples:

Input: arr[] = [2, 3, 2, 3, 5]
Output: [0, 2, 2, 0, 1]
Explanation: We have: 1 occurring 0 times, 2 occurring 2 times, 3 occurring 2 times, 4 occurring 0 times, and 5 occurring 1 time.
Input: arr[] = [3, 3, 3, 3]
Output: [0, 0, 4, 0]
Explanation: We have: 1 occurring 0 times, 2 occurring 0 times, 3 occurring 4 times, and 4 occurring 0 times.
Input: arr[] = [1]
Output: [1]
Explanation: We have: 1 occurring 1 time, and there are no other numbers between 1 and the size of the array.
Constraints:
1 ≤ arr.size() ≤ 106
1 ≤ arr[i] ≤ arr.size()

GFG Python3:

class Solution:
    def frequencyCount(self, arr):
        n = len(arr)
        freq_map = dict()
        for i in range(n):
            if arr[i] in freq_map:
                freq_map[arr[i]] += 1
            else:
                freq_map[arr[i]] = 1
                
        result = []
        j = 1
        while j <= n:
            result.append(freq_map.get(j,0))
            j += 1
        
        return result

C:

#include <stdio.h>

void frequencyCount(int arr[], int n) {
    int freq[n + 1];
    for (int i = 0; i <= n; i++)
        freq[i] = 0;

    for (int i = 0; i < n; i++)
        if (arr[i] <= n)
            freq[arr[i]]++;

    for (int i = 1; i <= n; i++)
        printf("%d ", freq[i]);
}

int main() {
    int arr[] = {2, 3, 2, 3, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    frequencyCount(arr, n);

    return 0;
}
